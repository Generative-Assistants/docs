{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":""},{"location":"#what-is-sentius-teach-and-repeat-platform","title":"What is Sentius Teach and Repeat Platform?","text":"<p>Sentius Teach &amp; Repeat Platform is an agentic platform that enables teams and companies to automate individual tasks and entire workflows using millions of concurrent autonomous AI agents working together humans under human supervision.</p> <p>AI agent, by definition, is a software component that is connected to one or more tools, and capable of figuring out how to solve a particular task on its own with minimal to no human intervention - autonomously. </p> <p>Our first AI agent is Browser Agent. It is designed to intelligently navigate websites to autonomously complete tasks like interacting with them or extracting data from them.</p> <p>For example, you can ask Sentius browser agent to find a quarterly financial results presentation of a public company:</p> <p>Our second AI agent is OpenAPI agent. It is designed to interact with a given web service's REST APIs as long as those APIs are described based on OpenAPI standard.</p> <p>For example, you can configure Sentius OpenAPI agent to ask a e-commerces shipping service like FreightOS to calculate shipping estimates for moving goods from China to US.</p> <p>Our third AI agent is Prompt Agent. It interacts with an LLM to perform tasks that do not require use of any tools, like providing a structured response to a question based on data obtained by other AI agents, or generating summaries etc.</p> <p>For example, you can ask Sentius prompt agent to look at the data collected by the browser agent and transform it into a form that is native for a given OpenAPI to be called by OpenAPI agent.</p> <p>There are more AI agents currently in development, like document agent capable of finding answers to a given question within a provided document or set of documents, desktop agent designed to control desktop applications across Windows and macOS, with even more coming in the future.</p> <p>You can learn more about our vision of Agentic Enterprise in our Whitepaper.</p> <p>To solve more complex tasks, agents can be combined together into multi-agent workflows using our Workflow Engine. </p> <p>Imagine that you want to make your organization more efficient using their power:</p> <ol> <li>You start with delegating small, individual tasks isolated from each other, to autonomous AI agents, like checking your customers' driver licenses on a DMV website of their driver license using our browser agent. </li> <li>As you start seeing the positive effect of having these tasks automated, you want to combine more and more such tasks delegated to various autonomous AI agents (browser agent, OpenAPI agent, prompt agent etc.) into multi-step workflows, to increase the level of automation. </li> <li>Over the time, you want to expand your workflows to more and more areas of work in your organization, but some tasks have to be done by people, and so you add people to the mix (human-in-the-loop). </li> <li>Finally, as you see your information work automated at the acceptable level for your company, you want to automate physical work, too, and so you delegate it to physical robots also powered by our AI agents combined together into multi-step workflows (coming in 2026+).</li> </ol>"},{"location":"#how-sentius-teach-repeat-platform-works","title":"How Sentius Teach &amp; Repeat Platform Works","text":"<p>At conceptual level, Sentius agentic platform starts with the autonomous AI agents that can work on their own, or be organized to work together within the agentic workflows using the agentic workflow engine.</p> <p>At user level, Sentius agentic platform starts with three Platform Components that make it easy to build autonomous agents and complex workflows - two applications and one service:</p>"},{"location":"#applications","title":"Applications","text":"<ul> <li> <p>Sentius Copilot+ - Electron-based desktop application that controls web browsers (and, later, desktop apps) across Windows, macOS, and Ubuntu.</p> </li> <li> <p>Sentius Studio - native desktop application that allows creation, editing, testing, deployment, and monitoring of complex workflows. Currently supports Windows 10+, with macOS support coming later in 2025.</p> </li> </ul>"},{"location":"#services","title":"Services","text":"<ul> <li>Sentius Workflow Engine - agentic workflow engine designed to run complex multi-agent workflows. It is embedded into Sentius Studio and is also hosted in Sentius Agentic Cloud.</li> </ul>"},{"location":"#how-to-start-working-with-sentius","title":"How to Start Working With Sentius","text":""},{"location":"#end-users","title":"End-Users","text":"<p>If you want to automate your work using Sentius agentic platform, you can start with Sentius Copilot+. With it, you can ask the system to intelligently navigate websites to execute tasks for you, be that filling out the forms or extracting data. You can either ask it to figure out the task on its own, or you can show it how to execute that task by using its Recorder feature.</p> <p>If you want to build more complex automations, you can download Sentius Studio. With it, you can build workflows that involve multiple website automation tasks done by our browser agent, text manipulation using LLMs done by our prompt agent, and, if you are up to it, calls to REST APIs of the web services done by our OpenAPI agent.</p> <p>With Sentius Studio, you can run your automations locally on your computer, or you can deploy them to Sentius Agentic Cloud.</p>"},{"location":"#developers","title":"Developers","text":"<p>If you want to automate work using our browser agent by integrating it into your existing applications, you can use our browser agent API.</p> <p>If you want to incorporate more than one browser agent or multiple autonomous AI agents, you can use our workflow engine API. To author them, you can write them on your own, use your favorite coding AI assistant, or use Sentius Studio.</p> <p>Start coding with Quick Start.</p>"},{"location":"#get-support","title":"Get Support","text":"<p>Want to get in touch with the Sentius team? Reach out to us via email.</p> <p>You're all set!</p>"},{"location":"platform-components/","title":"Platform Components","text":"<p>Sentius agentic platform has three components that make it easy to build autonomous agents and complex workflows:</p>"},{"location":"platform-components/#applications","title":"Applications","text":"<ul> <li> <p>Sentius Copilot+ - Electron-based desktop application that controls web browsers (and, later, desktop apps) across Windows, macOS, and Ubuntu.</p> </li> <li> <p>Sentius Studio - native desktop application that allows creation, editing, testing, deployment, and monitoring of complex workflows. Now supports Windows 10+, with macOS support coming later in 2025.</p> </li> </ul>"},{"location":"platform-components/#services","title":"Services","text":"<ul> <li>Sentius Workflow Engine - agentic workflow engine designed to run complex multi-agent workflows. It is embedded into Sentius Studio and is also hosted in Sentius Agentic Cloud.</li> </ul>"},{"location":"quick-start/","title":"Quick Start","text":"<p>Coming soon</p>"},{"location":"quick-start/#create-your-first-browser-agent","title":"Create your first Browser Agent","text":""},{"location":"quick-start/#learn-concepts","title":"Learn Concepts","text":"<p>Learn more about core Sentius Teach &amp; Repeat Platform concepts to build complex applications with agents and workflows.</p>"},{"location":"quick-start/#agents","title":"Agents","text":""},{"location":"quick-start/#workflows","title":"Workflows","text":""},{"location":"quick-start/#start-build","title":"Start build","text":"<p>And here you are! You're ready to start building your own autonomous web, OpenAPI and prompt agents, and workflows. Here are several examples to get started. Happy building! \ud83d\ude4c</p>"},{"location":"api/","title":"Overview","text":"<p>Sentius API requires an API key and appropriate permissions. Your API key must be added as a query parameter alongside every request.</p> CurlPython <pre><code>curl -X GET \"https://api.sentius.ai/dialog_sessions?api_key=your_api_key\" \\\n     -H \"Content-Type: application/json\"\n</code></pre> <pre><code>import requests\n\nurl = \"https://api.sentius.ai/dialog_sessions\"\nparams = {\"api_key\": \"your_api_key\"}\nresponse = requests.get(url, params=params)\nprint(response.json())\n</code></pre> <p>We currently support a limited set of Browser Agent actions via API.</p>"},{"location":"api/#browser-agent-api","title":"Browser Agent API","text":"<p>Visit Browser Agent API section to learn how to integration browser agent directly into your applications.</p>"},{"location":"api/#workflow-engine-api","title":"Workflow Engine API","text":"<p>Visit Workflow Engine API section to learn how to use workflow engine to orchestrate your applications.</p>"},{"location":"api/browser-agent-api/","title":"Browser Agent API","text":""},{"location":"api/browser-agent-api/#prerequisites","title":"Prerequisites","text":"<ol> <li>Download, install, and run Sentius Copilot+ application. The application interacts with the Chromium-based browser and must be installed on the machine which will execute the tasks.</li> <li>Get access to Sentius Teach &amp; Repeat Platform waitlist in the developer role by clicking Join Waitlist when running the Sentius Copilot+ Application. </li> <li>Obtain API Key from your Sentius Copilot+ application (go to Settings, click API)</li> </ol>"},{"location":"api/browser-agent-api/#dialog-sessions","title":"Dialog Sessions","text":"<p>To integrate Sentius Copilot+ into your application directly (without Workflow Engine), you need to:</p> <ol> <li>Create new Dialog Session</li> <li>If you have particular tasks to solve, you may teach Copilot how to accomplish the task by recording a Skill. </li> <li>Send tasks to perform by sending messages to the created dialog session (see Dialog Sessions). You may specify a particular Skill (saved instruction) to make sure the task is going to be solved in a particular way.</li> </ol>"},{"location":"api/browser-agent-api/#tasks","title":"Tasks","text":"<p>To oversee the status of tasks that are or were run by Sentius Copilot+, visit Tasks API.</p>"},{"location":"api/dialog-sessions/","title":"Dialog Sessions API","text":""},{"location":"api/dialog-sessions/#creating-or-retrieving-a-session","title":"Creating or retrieving a session","text":"<p>Each time you chat with Browser Agent, your message is attached to one of the dialog sessions.</p> <p>You start with either getting an active session:</p> CurlPython <pre><code>curl -X GET \"https://api.sentius.ai/dialog_sessions?api_key=&lt;your_api_key&gt;\" \\\n     -H \"Content-Type: application/json\"\n</code></pre> <pre><code>import requests\n\nurl = \"https://api.sentius.ai/dialog_sessions\"\nparams = {\"api_key\": \"&lt;your_api_key&gt;\"}\nresponse = requests.get(url, params=params)\nprint(response.json())\n</code></pre> <p>or creating a new one:</p> CurlPython <pre><code>curl -X POST \"https://api.sentius.ai/dialog_sessions?api_key=&lt;your_api_key&gt;\" \\\n     -H \"Content-Type: application/json\"\n</code></pre> <pre><code>import requests\n\nurl = \"https://api.sentius.ai/dialog_sessions\"\nparams = {\"api_key\": \"&lt;your_api_key&gt;\"}\nresponse = requests.post(url, params=params)\nprint(response.json())\n</code></pre> <p>Either way you will receive a response containing your dialog session <code>&lt;dialog_session_id&gt;</code>. Using this <code>&lt;dialog_session_id&gt;</code> value in the url, you can now interact with the session.</p>"},{"location":"api/dialog-sessions/#sending-messages","title":"Sending messages","text":"<p>To send message to the particular dialog session <code>&lt;dialog_session_id&gt;</code>, one may use the following code with the given arguments:</p> <ul> <li> <p><code>text</code> (string, required) - task message,</p> </li> <li> <p><code>instruction_id</code> (string, optional) - one can pass the particular  to determine the Skill which will be used to solve the task.  If not given, agent tries to select the matching Skill among all Skills including Public and Personal Skills.  If there is no matching Skill, agent solves the task from scratch. <li> <p><code>close_tabs</code> (boolean, optional) - whether to close browser tabs after task completion (False, by default),</p> </li> <li> <p><code>web_sites_for_tasks</code> (list of strings, optional) - list of websites to execute the task on (now we support only list of the length one),</p> </li> <li> <p><code>utilize_user_instructions</code> (boolean, optional) - whether to utilize user's Skills to solve the task (True, by default).</p> </li> CurlPython <pre><code>curl -X POST \"https://api.sentius.ai/dialog_sessions/&lt;dialog_session_id&gt;/chat?api_key=&lt;your_api_key&gt;\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"text\": \"&lt;task&gt;\",\n       \"instruction_id\": \"AeOfd32\"\n     }'\n</code></pre> <pre><code>import requests\n\nurl = f\"https://api.sentius.ai/dialog_sessions/&lt;dialog_session_id&gt;/chat\"\nparams = {\"api_key\": \"&lt;your_api_key&gt;\"}\ndata = {\n    \"text\": \"&lt;task&gt;\",\n    \"instruction_id\": \"&lt;skill_id&gt;\",\n}\nresponse = requests.post(url, json=data, params=params)\nprint(response.json())\n</code></pre>"},{"location":"api/dialog-sessions/#retrieving-session-history","title":"Retrieving session history","text":"<p>To get the dialog history of the particular dialog session <code>&lt;dialog_session_id&gt;</code>, one may use the following code:</p> CurlPython <pre><code>curl -X GET \"https://api.sentius.ai/dialog_sessions/&lt;dialog_session_id&gt;/history?api_key=&lt;your_api_key&gt;\" \\\n     -H \"Content-Type: application/json\"\n</code></pre> <pre><code>import requests\n\nurl = f\"https://api.sentius.ai/dialog_sessions/&lt;dialog_session_id&gt;/history\"\nparams = {\"api_key\": \"&lt;your_api_key&gt;\"}\nresponse = requests.get(url, params=params)\nprint(response.json())\n</code></pre>"},{"location":"api/skills/","title":"Tasks and Skills APIs","text":""},{"location":"api/skills/#recording-skill","title":"Recording Skill","text":"<p>To create a Skill, In Sentius Copilot+ Application go to \"Skills\" tab and click \"Record\" button in the upper right corner. One can copy ID of the Skill by clicking on \"...\" button of the corresponding Skill, click \"Copy ID\".</p>"},{"location":"api/skills/#using-particular-skill","title":"Using Particular Skill","text":"<p>To use a particular skill, one should pass Skill ID in a task request.  One can copy ID of the Skill by clicking on \"...\" button of the corresponding Skill, click \"Copy ID\".</p> Python <pre><code>import requests\n\nurl = f\"https://api.sentius.ai/dialog_sessions/&lt;dialog_session_id&gt;/chat\"\nparams = {\"api_key\": \"&lt;your_api_key&gt;\"}\ndata = {\n    \"text\": \"&lt;task&gt;\",\n    \"instruction_id\": \"&lt;skill_id&gt;\",\n}\nresponse = requests.post(url, json=data, params=params)\nprint(response.json())\n</code></pre> <p>If the requested task was known and agent utilized recorded instruction to execute the task, in the response one can find two boolean attributes:</p> <ul> <li><code>response.json()[\"attributes\"][\"temporary_attributes\"][\"replay_recorded_actions\"]</code> -- whether recorded actions were replayed successfully;</li> <li><code>response.json()[\"attributes\"][\"temporary_attributes\"][\"generated_new_actions\"]</code> -- whether Agent had to generate new actions in general mode to perform the task.</li> </ul>"},{"location":"api/skills/#retrieving-skills","title":"Retrieving Skills","text":""},{"location":"api/skills/#personal-skills","title":"Personal Skills","text":"<p>To get Skills saved by the user, one can use the following code: </p> CurlPython <pre><code>curl -X GET \"https://api.sentius.ai/tasks/instructions?api_key=&lt;your_api_key&gt;\" \\\n     -H \"Content-Type: application/json\"\n</code></pre> <pre><code>import requests\n\nurl = \"https://api.sentius.ai/tasks/instructions\"\nparams = {\"api_key\": \"&lt;your_api_key&gt;\"}\nresponse = requests.get(url, params=params)\nprint(response.json())\n</code></pre>"},{"location":"api/skills/#public-skills","title":"Public Skills","text":"<p>To get Skills available for all users, one can use the following code: </p> CurlPython <pre><code>curl -X GET \"https://api.sentius.ai/tasks/instructions/common?api_key=&lt;your_api_key&gt;\" \\\n     -H \"Content-Type: application/json\"\n</code></pre> <pre><code>import requests\n\nurl = \"https://api.sentius.ai/tasks/instructions/common\"\nparams = {\"api_key\": \"&lt;your_api_key&gt;\"}\nresponse = requests.get(url, params=params)\nprint(response.json())\n</code></pre>"},{"location":"api/skills/#all-skills","title":"All Skills","text":"<p>To get all Skills, one can use the following code: </p> CurlPython <pre><code>curl -X GET \"https://api.sentius.ai/tasks/instructions/all?api_key=&lt;your_api_key&gt;\" \\\n     -H \"Content-Type: application/json\"\n</code></pre> <pre><code>import requests\n\nurl = \"https://api.sentius.ai/tasks/instructions/all\"\nparams = {\"api_key\": \"&lt;your_api_key&gt;\"}\nresponse = requests.get(url, params=params)\nprint(response.json())\n</code></pre>"},{"location":"api/skills/#deleting-skills","title":"Deleting Skills","text":"<p>To delete Skill with ID <code>&lt;skill_id&gt;</code>, one can use the following code: </p> CurlPython <pre><code>curl -X DELETE \"https://api.example.com/tasks/instructions/&lt;skill_id&gt;?api_key=&lt;your_api_key&gt;\" \\\n     -H \"Content-Type: application/json\"\n</code></pre> <pre><code>import requests\n\nurl = f\"https://api.example.com/tasks/instructions/&lt;skill_id&gt;\"\nparams = {\"api_key\": \"&lt;your_api_key&gt;\"}\nresponse = requests.delete(url, params=params)\nprint(response.status_code)\n</code></pre>"},{"location":"api/skills/#editing-skills","title":"Editing Skills","text":"<p>Attention! Irreversible effect! If you replace instruction, you can not reverse it back!</p> <p>If you want to modify your personal instruction, it is recommended to first get all personal instructions using  <code>\"/instructions\"</code> endpoint, select and save locally the instruction of interest, modify it as needed and then update saved instruction using the following code that replaces skill with ID <code>&lt;skill_id&gt;</code> within the new instruction dictionary <code>&lt;instruction&gt;</code>: </p> Python <pre><code>import requests\n\nurl = f\"https://api.example.com/tasks/instructions/&lt;skill_id&gt;\"\nparams = {\"api_key\": \"&lt;your_api_key&gt;\"}\nresponse = requests.put(url, params=params, json=&lt;instruction&gt;)\nprint(response.status_code)\n</code></pre>"},{"location":"api/whitelist/","title":"Whitelist API","text":"<p>This API is available only for organization members with <code>can_use_whitelist</code> permission.</p>"},{"location":"api/whitelist/#adding-user-to-whitelist","title":"Adding user to whitelist","text":"<p>You can allow users to gain access to your organization and use certain features.</p> CurlPython <pre><code>curl -X 'POST' \\\n  'https://api.sentius.ai/admin/whitelist?api_key=&lt;your_api_key&gt;' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"name\": \"Jane Doe\",\n    \"email\": \"user@example.com\",\n    \"permissions\": [\n        \"can_read\",\n        \"can_use_api\",\n        \"can_delegate\"\n    ],\n    \"start_date\": \"2025-03-05T11:34:30.258Z\",\n    \"end_date\": null\n    }'\n</code></pre> <pre><code>import requests\n\nurl = \"https://api.sentius.ai/admin/whitelist\"\nparams = {\"api_key\": \"&lt;your_api_key&gt;\"}\ndata = {\n    \"name\": \"Jane Doe\",\n    \"email\": \"user@example.com\",\n    \"permissions\": [\n        \"can_read\",\n        \"can_use_api\",\n        \"can_delegate\"\n    ],\n    \"start_date\": \"2025-03-05T11:34:30.258Z\",\n    \"end_date\": null\n}\nresponse = requests.post(url, json=data, params=params)\nprint(response.json())\n</code></pre> <ul> <li> <p><code>name</code> (string, required) - Full name.</p> </li> <li> <p><code>email</code> (string, required) - Email address. This must be the exact address the person will use to authenticate.</p> </li> <li> <p><code>permissions</code> (list, required) - List of permissions. Possible values are:</p> <ul> <li> <p><code>can_read</code> - must be always provided to allow access to organization,</p> </li> <li> <p><code>can_use_api</code> - can use API keys,</p> </li> <li> <p><code>can_use_whitelist</code> - allow user to add or remove other users from whitelist,</p> </li> <li> <p><code>can_delegate</code> - can delegate tasks to other users</p> </li> </ul> </li> <li> <p><code>start_date</code> (datetime string, required) - User will be given access after this date.</p> </li> <li> <p><code>end_date</code> (datetime string, optional) - User will be given access up to this date.</p> </li> </ul>"},{"location":"api/whitelist/#removing-user-from-whitelist","title":"Removing user from whitelist","text":"<p>Additionally, it is possible to revoke access to your organization.</p> CurlPython <pre><code>curl -X 'DELETE' \\\n  'https://api.sentius.ai/admin/whitelist?email=user%40example.com&amp;api_key=&lt;your_api_key&gt;' \\\n  -H 'accept: */*'\n</code></pre> <pre><code>import requests\n\nurl = f\"https://api.sentius.ai/admin/whitelist\"\nparams = {\n    \"api_key\": \"&lt;your_api_key&gt;\",\n    \"email\": \"user@example.com\"\n}\nresponse = requests.delete(url, params=params)\n</code></pre>"},{"location":"api/workflow-engine-api/","title":"Workflow Engine API","text":"<p>This document describes how to create, configure and run Workflow Engine pipelines.</p>"},{"location":"api/workflow-engine-api/#context","title":"Context","text":"<p>When Workflow Engine config is runned, it gets data from context, sends it to external APIs and saves responses from these APIs to context. For steps no highest level in config (steps are elements of <code>steps</code> list of WE config) <code>context</code> - is payload that you send to workflow. For example, if you send to WE run</p> <pre><code>{\n  \"x\": 1\n}\n</code></pre> <p>This \"x\" could be referred in <code>input_mapping</code>s of steps as <code>$context$.x</code>.</p> <p>But if step is substep of loop (see example of loop below), context will be different.</p> <p>For example, let's say input is</p> <pre><code>{\n  \"high_level_key\": {\n    \"x\": [\n      {\n        \"y\": 1\n      },\n      {\n        \"y\": 2\n      }\n    ]\n  },\n  \"another_high_level_key\": 42\n}\n</code></pre> <p>And in <code>loop</code> we set <code>self</code> as <code>high_level_key</code> and loop over <code>x</code>. In this case for every step in <code>sub_steps</code> of the <code>loop</code> context will be elements of the list. At first iteration context will be <code>{\"y\": 1}</code>, at second - <code>{\"y\": 2}</code>.</p> <p>In this case input mapping <code>source</code> should be <code>$context$.y</code>. If you need to use <code>another_high_level_key</code> value in the one of <code>sub_steps</code>, use <code>$parent$</code>: <code>$context$.$parent$.$parent$.another_high_level_key</code>. As we said, <code>{\"y\": 1}</code> is context, it is element of the list, so <code>$context$.$parent$</code> is a list. This list is the value of the key-value structure, so <code>$context$.$parent$.$parent$</code> will be structure with <code>high_level_key</code> and <code>another_high_level_key</code>.</p>"},{"location":"api/workflow-engine-api/#workflow-schema-structure","title":"Workflow Schema Structure","text":""},{"location":"api/workflow-engine-api/#core-structure","title":"Core structure","text":"<p>The Workflow configuration consists of these main components:</p> <ul> <li>Basic metadata (title, description, authors)</li> <li>OpenAPI specifications</li> <li>Input schema definition</li> <li>Workflow steps configuration</li> </ul>"},{"location":"api/workflow-engine-api/#required-fields","title":"Required Fields","text":"<ul> <li><code>sentius_workflow_engine_schema_version</code>: Must be '0.60'</li> <li><code>title</code>: Name of your workflow</li> <li><code>description</code>: Brief description of the workflow's purpose</li> <li><code>authors</code>: List of workflow authors</li> <li><code>openapi</code>: List of OpenAPI specifications</li> <li><code>input_schema</code>: Schema defining the expected input format</li> <li><code>steps</code>: Ordered list of workflow steps</li> </ul>"},{"location":"api/workflow-engine-api/#configuration-example","title":"Configuration Example","text":"<pre><code>{\n  \"sentius_workflow_engine_schema_version\": \"0.60\",\n  \"title\": \"City Information Workflow\",\n  \"description\": \"Retrieves and processes city demographic information\",\n  \"authors\": \"Jane Doe, John Smith\",\n  \"openapi\": [\n    ...\n  ],\n  \"input_schema\": \"{\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"city_name\\\": {\\\"type\\\": \\\"string\\\"}}, \\\"required\\\": [\\\"city_name\\\"], \\\"additionalProperties\\\": false}\",\n  \"steps\": [\n    ...\n  ]\n}\n</code></pre>"},{"location":"api/workflow-engine-api/#openapi-configuration","title":"OpenAPI Configuration","text":"<p>OpenAPI specifications are used to define available API integrations. Each OpenAPI entry requires:</p> <ul> <li><code>id</code> - Unique identifier for referencing the API</li> <li><code>address</code> - URL to the OpenAPI specification</li> </ul>"},{"location":"api/workflow-engine-api/#openapi-configuration-example","title":"OpenAPI configuration example","text":"<p>This is an example of OpenAPI configuration for the local server using 8001 port.</p> <pre><code>{\n  \"id\": \"upload_api\",\n  \"address\": \"http://localhost:8001/openapi.json\"\n}\n</code></pre>"},{"location":"api/workflow-engine-api/#input-schema","title":"Input Schema","text":"<p>The input schema uses JSON Schema format to define the expected input structure. It supports:</p> <ul> <li>Property definitions</li> <li>Required field specifications</li> <li>Additional property controls</li> <li>Type validations</li> </ul> <p>PAY ATTENTION: input schema should be in string format. Example is above in core section.</p>"},{"location":"api/workflow-engine-api/#step-types","title":"Step Types","text":""},{"location":"api/workflow-engine-api/#common-fields","title":"Common Fields","text":"<p>Each step must have the following fields:</p> <ul> <li><code>id</code>: An unique name of the step</li> <li><code>title</code>: Step title</li> <li><code>kind</code>: Type of the step</li> <li><code>description</code>: Description of the step</li> <li><code>semantic_action</code>: Schema defining step actions</li> <li><code>dependsOn</code>: List of previous teps ids</li> </ul>"},{"location":"api/workflow-engine-api/#loop-step-type","title":"Loop Step Type","text":"<p>Used to loop over fields in workflow run context.</p> <ul> <li><code>kind</code>: Must be <code>sentius.kinds.agents.loop</code></li> <li><code>sub_steps</code>: List of the steps schemas that executed in loop</li> <li><code>semantic_action</code>: LoopSemanticAction schema</li> </ul> <p>LoopSemanticAction: - <code>semantic_action_type</code>: Must be <code>loop</code> - <code>self</code>: Optional field, describing the field of the workflow run state, that should be used as context - <code>loop_over</code>: Field from the context that is used for iteration. Elements of this list will be contexts of sub_steps</p>"},{"location":"api/workflow-engine-api/#loop-example","title":"Loop Example","text":"<pre><code>{\n  \"id\": \"step_id\",\n  \"title\": \"Step Title\",\n  \"kind\": \"sentius.kinds.agents.loop\",\n  \"description\": \"Step Description\",\n  \"semantic_action\": {\n    \"semantic_action_type\": \"loop\",\n    \"self\": null,\n    \"loop_over\": \"field_to_loop_over\"\n  },\n  \"dependsOn\": [],\n  \"sub_steps\": [\n    {\n      \"id\": \"step_id\",\n      \"title\": \"Step Title\",\n      \"kind\": \"sentius.kinds.agents.openapiagent\",\n      \"description\": \"Step Description\",\n      \"semantic_action\": {\n        \"semantic_action_type\": \"openapi\",\n        \"openapi_path\": \"/endpoint\",\n        \"output_schema\": \"#/components/schemas/OutputSchema\",\n        \"openapi_id\": \"testserver_openapi\"\n      },\n      \"dependsOn\": [],\n      \"input_mapping\": [\n        {\n          \"source\": \"$context$.field_name\",\n          \"target\": \"$input_schema$.field_name\",\n          \"type\": null\n        }\n      ],\n      \"output_mapping\": [\n        {\n          \"source\": \"$context$.field_name\",\n          \"target\": \"$input_schema$.field_name\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"api/workflow-engine-api/#promptagent-step-type","title":"PromptAgent Step Type","text":"<p>Used to send requests to a LLM using structured json output mode of the LLM.</p> <ul> <li><code>kind</code>: Must be <code>sentius.kinds.agents.promptagent</code></li> <li><code>semantic_action</code>: PromptSemanticAction schema</li> <li><code>input_mapping</code>: List of Mapping schemas</li> <li><code>output_mapping</code>: List of Mapping schemas</li> </ul> <p>PromptSemanticAction - <code>semantic_action_type</code>: Must be <code>prompt</code> - <code>system_prompt</code>: General prompt for LLM - <code>prompt</code>: Specific prompt to LLM that could be use values from the input mappings - <code>structured_output_schema</code>: The json schema of the expected output - <code>structured_output_schema_name</code>: Name of the output schema</p> <p>Mapping - <code>source</code>: What field of the context should we use as input to step - <code>target</code>: Name of the key, which uses <code>source</code> as value</p>"},{"location":"api/workflow-engine-api/#promptagent-example","title":"PromptAgent Example","text":"<pre><code>{\n  \"id\": \"step_id\",\n  \"title\": \"Step Title\",\n  \"kind\": \"sentius.kinds.agents.promptagent\",\n  \"description\": \"Step Description\",\n  \"semantic_action\": {\n    \"semantic_action_type\": \"prompt\",\n    \"system_prompt\": \"You are a virtual agent that is an expert in geography.\",\n    \"prompt\": \"Your task is to transform Country name to capital. Input: country: %country%.\",\n    \"structured_output_schema\": \"{\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"name\\\": {\\\"type\\\": \\\"string\\\"}}, \\\"required\\\": [\\\"name\\\"], \\\"additionalProperties\\\": false}\",\n    \"structured_output_schema_name\": \"PromptOutput\"\n  },\n  \"dependsOn\": [],\n  \"input_mapping\": [\n    {\n      \"source\": \"$context$.field_name\",\n      \"target\": \"$input_schema$.field_name\"\n    }\n  ],\n  \"output_mapping\": [\n    {\n      \"source\": \"$context$.field_name\",\n      \"target\": \"$input_schema$.field_name\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api/workflow-engine-api/#browseragent-step-type","title":"BrowserAgent Step Type","text":"<p>Used for requests to Sentius Browser Agent</p> <ul> <li><code>kind</code>: Must be <code>sentius.kinds.agents.browseragent</code></li> <li><code>semantic_action</code>: BrowserAgentSemanticAction schema</li> </ul> <p>BrowserAgentSemanticAction - <code>semantic_action_type</code>: Must be <code>browseragent</code> - <code>instruction_template</code>: Request to Browser Agent on natural language - <code>structured_output_schema</code>: Schema of the expected output - <code>pods</code>: List of the Pod schemas that define on which instance of Browser Agent action should be executed - <code>instruction_id</code>: Optional field defining id of the instruction that should be used - <code>input_mapping</code>: List of Mapping schemas - <code>output_mapping</code>: List of Mapping schemas</p> <p>Pod - <code>target_user_email</code>: Api email of the user whose Browser Agent should be used for step execution</p> <p>Mapping - <code>source</code>: What field of the context should we use as input to step - <code>target</code>: Name of the key, which uses <code>source</code> as value</p>"},{"location":"api/workflow-engine-api/#browser-agent-example","title":"Browser Agent Example","text":"<pre><code>{\n  \"id\": \"step_id\",\n  \"title\": \"Step Title\",\n  \"kind\": \"sentius.kinds.agents.browseragent\",\n  \"description\": \"Step Description\",\n  \"semantic_action\": {\n    \"semantic_action_type\": \"browseragent\",\n    \"instruction_template\": \"Check the severe weather conditions for the itinerary using Sentius Browser Agent\",\n    \"structured_output_schema\": \"{\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"ba_int_field\\\": {\\\"type\\\": \\\"integer\\\"}, \\\"ba_str_field\\\": {\\\"type\\\": \\\"string\\\"}}, \\\"required\\\": [\\\"ba_int_field\\\", \\\"ba_str_field\\\"], \\\"additionalProperties\\\": false}\",\n    \"pods\": [\n      {\n        \"target_user_email\": \"email\"\n      }\n    ],\n    \"instruction_id\": null\n  },\n  \"dependsOn\": [],\n  \"input_mapping\": [\n    {\n      \"source\": \"$context$.field_name\",\n      \"target\": \"$input_schema$.field_name\"\n    }\n  ],\n  \"output_mapping\": [\n    {\n      \"source\": \"$context$.field_name\",\n      \"target\": \"$input_schema$.field_name\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api/workflow-engine-api/#openapi-agent-step-type","title":"OpenAPI Agent Step Type","text":"<p>Step that sends requests to API. The OpenAPI fields are:</p> <ul> <li><code>kind</code>: Must be <code>sentius.kinds.agents.openapiagent</code></li> <li><code>semantic_action</code>: OpenapiSemanticAction or OpenapiUploadSemanticAction schemas</li> <li><code>input_mapping</code>: List of OpenapiInputMapping schemas</li> <li><code>output_mapping</code>: List of Mapping schemas</li> </ul> <p>OpenapiSemanticAction - <code>semantic_action_type</code>: Must be <code>openapi</code> - <code>openapi_path</code>: Endpoint used in request - <code>outpu_schema</code>: Reference to OpenAPI chema name - <code>openapi_id</code>: Name of the OpenAPI schema defined in the pipeline</p> <p>OpenapiUploadSemanticAction - <code>semantic_action_type</code>: Must be <code>openapi.upload</code> - <code>openapi_path</code>: Endpoint used in request - <code>outpu_schema</code>: Reference to OpenAPI chema name - <code>openapi_id</code>: Name of the OpenAPI schema defined in the pipeline - <code>pods</code>: List of the Pod schemas that define on which instance of Browser Agent action should be executed</p> <p>Pod - <code>target_user_email</code>: Api email of the user whose Browser Agent should be used for step execution</p> <p>OpenapiInputMapping Note that input mapping of this step differs from the usual mapping. - <code>source</code>: What field of the context should we use as input to step - <code>target</code>: Name of the key, which uses <code>source</code> as value - <code>type</code>: Must be either <code>Sentius.Properties.Mappings.Http.Payload</code>, <code>Sentius.Properties.Mappings.Http.Header</code>, <code>Sentius.Properties.Mappings.Http.QueryParam</code> or <code>Sentius.Properties.Mappings.Http.PathParam</code>. Values from the workflow run state will be used as payload fields, headers, query params or path params according to type values.</p> <p>Mapping - <code>source</code>: What field of the context should we use as input to step - <code>target</code>: Name of the key, which uses <code>source</code> as value</p>"},{"location":"api/workflow-engine-api/#openapi-agent-example","title":"OpenAPI Agent Example","text":"<pre><code>{\n  \"id\": \"step_id\",\n  \"title\": \"Step Title\",\n  \"kind\": \"sentius.kinds.agents.openapiagent\",\n  \"description\": \"Step Description\",\n  \"semantic_action\": {\n    \"semantic_action_type\": \"openapi\",\n    \"openapi_path\": \"/endpoint\",\n    \"output_schema\": \"#/components/schemas/OutputSchema\",\n    \"openapi_id\": \"testserver_openapi\"\n  },\n  \"dependsOn\": [],\n  \"input_mapping\": [\n    {\n      \"source\": \"$context$.field_name\",\n      \"target\": \"$input_schema$.field_name\",\n      \"type\": null\n    }\n  ],\n  \"output_mapping\": [\n    {\n      \"source\": \"$context$.field_name\",\n      \"target\": \"$input_schema$.field_name\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api/workflow-engine-api/#creating-workflows","title":"Creating Workflows","text":"<p>This section contains instruction requests to validate, submit and run workflows. </p> <p>In the next Section Example, one may find an example of workflow configuration.</p>"},{"location":"api/workflow-engine-api/#pre-requisites","title":"Pre-requisites","text":"<p>We assume you have already created a dialog session and have an active session <code>dialog_session_id</code>. If not, please refer to the Dialog Sessions API section.</p>"},{"location":"api/workflow-engine-api/#validating-a-workflow","title":"Validating a workflow","text":"<p>To check that created workflow structure is correct, run the following command:</p> <p>Curl</p> <pre><code>    curl -X 'POST' 'https://api.sentius.ai/workflows/forward/validate' \\\n      -H 'accept: application/json' \\\n      -H 'Content-Type: application/json' \\\n      -d '&lt;YOUR_WORKFLOW_CONFIG&gt;'\n</code></pre> <p>Python</p> <pre><code>    import requests\n\n    url = f\"https://api.sentius.ai/workflows/forward/validate\"\n    response = requests.post(url, json=&lt;YOUR_WORKFLOW_CONFIG&gt;)\n</code></pre>"},{"location":"api/workflow-engine-api/#submitting-a-workflow","title":"Submitting a workflow","text":"<p>Before using workflow you must submit it to Sentius API. After submitting, you will need to save <code>id</code> field from the response - it will be used later in workflow inference.</p> CurlPython <pre><code>curl -X POST \"https://api.sentius.ai/workflows?api_key=&lt;YOUR_API_KEY&gt;\" \\\n        -H \"Content-Type: application/json\"\n        -d '{\"config\": &lt;YOUR_WORKFLOW_CONFIG&gt;}'\n</code></pre> <pre><code>```python\nimport requests\n\nurl = f\"https://api.sentius.ai/workflows\"\nparams = {\"api_key\": \"your_api_key\"}\nresponse = requests.post(url, params=params, json={\"config\": &lt;YOUR_WORKFLOW_CONFIG&gt;})\nworkflow_id = response.json()[\"id\"]\nworkflow_id\n```\n</code></pre>"},{"location":"api/workflow-engine-api/#using-submitted-workflow","title":"Using submitted workflow","text":"<p>Running workflow is connected to the particular dialog session, workflow <code>id</code> and the input data for the workflow.  Input data must follow the input schema from the workflow configuration. To run workflow use the following command:</p> <p>Curl</p> <pre><code>    curl -X POST \"https://api.sentius.ai/dialog_sessions/{dialog_session_id}/run_workflow?api_key=&lt;YOUR_API_KEY&gt;&amp;workflow_id=&lt;SAVED_WORKFLOW_ID&gt;\" \\\n            -H \"Content-Type: application/json\"\n            -d '{\n                \"data\": &lt;YOUR_DATA&gt;\n            }'\n</code></pre> <p>Python</p> <pre><code>    import requests\n\n    url = f\"https://api.sentius.ai/dialog_sessions/{dialog_session_id}/run_workflow\"\n    params = {\"api_key\": \"&lt;YOUR_API_KEY&gt;\", \"workflow_id\": workflow_id}\n    response = requests.post(url, params=params, json={\"data\": &lt;YOUR_DATA&gt;})\n</code></pre>"},{"location":"api/workflow-engine-api/#example","title":"Example","text":"<p>Following workflow configuration runs two actions: it downloads the requested file from Google Drive, then uploads this file to the local server. To perform the second step, one should run the local server for file uploading, or replace it with custom server  (e.g., replace OpenAPI schema in workflow configuration).</p>"},{"location":"api/workflow-engine-api/#server","title":"Server","text":"<p>Create virtual environment, activate it and run <code>pip install uvicorn==0.34.0 fastapi==0.115.7 python-multipart==0.0.20</code> (requirements are written for Python 3.12).</p> <p>Save following code as <code>main.py</code> and start this mock server with <code>python -m uvicorn main:app --port=8001</code></p> <pre><code>import logging\n\nfrom fastapi import FastAPI, File, Form, UploadFile, Request\n\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s [%(levelname)s] %(message)s',\n    datefmt='%Y-%m-%d %H:%M:%S'\n)\n\nlogger = logging.getLogger(__name__)\n\napp = FastAPI()\n\n\n@app.post(\"/v1/reports/upload\", status_code=201)\nasync def upload_report(\n        request: Request,\n        file: UploadFile = File(...),\n        accountId: str = Form(...),\n        fileName: str = Form(...),\n        testId: str = Form(...),\n        isReady: bool = Form(...)\n):\n    logger.info(\"Received file upload request\")\n    return {\n        'file_details': {\n            'filename': file.filename,\n            'size': file.size,\n            'content_type': file.content_type\n        },\n        'metadata': {\n            'account_id': accountId,\n            'file_name': fileName,\n            'test_id': testId,\n            'is_ready': isReady,\n            'authorization_header': request.headers.get('authorization'),\n        },\n    }\n</code></pre>"},{"location":"api/workflow-engine-api/#workflow-config","title":"Workflow Config","text":"<p>Don't forget to put your Sentius API key value instead of <code>&lt;YOUR_API_KEY&gt;</code> to this config before uploading.</p> <pre><code>{\n  \"sentius_workflow_engine_schema_version\": \"0.60\",\n  \"title\": \"File Processing Workflow\",\n  \"description\": \"This is a workflow that downloads a file from Google Drive and uploads it to a server\",\n  \"authors\": \"Daniel Kornev, Fedor Ignatov\",\n  \"openapi\": [\n    {\n      \"id\": \"upload_api\",\n      \"address\": \"http://localhost:8001/openapi.json\"\n    }\n  ],\n  \"input_schema\": \"{\\\"properties\\\": {\\\"filename\\\": {\\\"type\\\": \\\"string\\\"}, \\\"fileKey\\\": {\\\"type\\\": \\\"string\\\"}, \\\"accountId\\\": {\\\"type\\\": \\\"string\\\"}, \\\"testId\\\": {\\\"type\\\": \\\"string\\\"}, \\\"Authorization\\\": {\\\"type\\\": \\\"string\\\"}}, \\\"required\\\": [\\\"filename\\\", \\\"fileKey\\\", \\\"accountId\\\", \\\"testId\\\", \\\"Authorization\\\"], \\\"type\\\": \\\"object\\\", \\\"additionalProperties\\\": false}\",\n  \"steps\": [\n    {\n      \"id\": \"download_file_from_google_drive\",\n      \"title\": \"Download File from Google Drive\",\n      \"kind\": \"sentius.kinds.agents.browseragent\",\n      \"description\": \"Download file from my Google Drive\",\n      \"semantic_action\": {\n        \"semantic_action_type\": \"browseragent\",\n        \"structured_output_schema\": \"{\\\"properties\\\": {\\\"text\\\": {\\\"type\\\": \\\"string\\\"}, \\\"timestamp\\\": {\\\"type\\\": \\\"string\\\"}, \\\"task\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"id\\\": {\\\"type\\\": \\\"integer\\\"}, \\\"dialog_session_id\\\": {\\\"type\\\": \\\"integer\\\"}, \\\"text\\\": {\\\"type\\\": \\\"string\\\"}, \\\"agent_task_id\\\": {\\\"type\\\": \\\"string\\\"}, \\\"state\\\": {\\\"type\\\": \\\"string\\\"}, \\\"is_successful\\\": {\\\"type\\\": \\\"boolean\\\"}, \\\"date_created\\\": {\\\"type\\\": \\\"string\\\"}, \\\"date_finished\\\": {\\\"type\\\": \\\"string\\\"}}, \\\"required\\\": [\\\"id\\\", \\\"dialog_session_id\\\", \\\"text\\\", \\\"agent_task_id\\\", \\\"state\\\", \\\"date_created\\\", \\\"date_finished\\\"]}, \\\"respond_buttons\\\": {\\\"type\\\": \\\"null\\\"}, \\\"task_duration_comment\\\": {\\\"type\\\": \\\"null\\\"}, \\\"attributes\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"task_id\\\": {\\\"type\\\": \\\"string\\\"}, \\\"task_state\\\": {\\\"type\\\": \\\"string\\\"}, \\\"task_text\\\": {\\\"type\\\": \\\"string\\\"}, \\\"message_type\\\": {\\\"type\\\": \\\"string\\\"}, \\\"temporary_attributes\\\": {\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"downloadedFileName\\\": {\\\"type\\\": \\\"string\\\"}, \\\"downloadedFilePath\\\": {\\\"type\\\": \\\"string\\\"}}, \\\"required\\\": [\\\"downloadedFileName\\\", \\\"downloadedFilePath\\\"]}, \\\"finish_datetime\\\": {\\\"type\\\": \\\"string\\\"}, \\\"task_user_eval\\\": {\\\"type\\\": \\\"null\\\"}, \\\"respond_buttons\\\": {\\\"type\\\": \\\"null\\\"}, \\\"task_duration_comment\\\": {\\\"type\\\": \\\"null\\\"}, \\\"task_history_update\\\": {\\\"type\\\": \\\"null\\\"}}, \\\"required\\\": [\\\"task_id\\\", \\\"task_state\\\", \\\"task_text\\\", \\\"message_type\\\", \\\"temporary_attributes\\\", \\\"finish_datetime\\\"]}}, \\\"required\\\": [\\\"text\\\", \\\"timestamp\\\", \\\"task\\\", \\\"attributes\\\"], \\\"type\\\": \\\"object\\\", \\\"additionalProperties\\\": false}\",\n        \"instruction_template\": \"Download %filename% from my Google Drive\",\n        \"pods\": [\n          {\n            \"target_user_email\": &lt;TARGET_USER_EMAIL&gt;\n          }\n        ],\n        \"instruction_id\": \"pejWSrhXPBSpUKn\"\n      },\n      \"input_mapping\": [\n        {\n          \"source\": \"$context$.filename\",\n          \"target\": \"%filename%\"\n        }\n      ],\n      \"output_mapping\": [\n        {\n          \"source\": \"$output_schema$.attributes.temporary_attributes.downloadedFilePath\",\n          \"target\": \"$context$.downloadedFilePath\"\n        },\n        {\n          \"source\": \"$output_schema$.attributes.temporary_attributes.downloadedFileName\",\n          \"target\": \"$context$.downloadedFileName\"\n        }\n      ]\n    },\n    {\n      \"id\": \"file_uploading\",\n      \"title\": \"File Uploading to Server\",\n      \"description\": \"Uploads file to a server given via OpenAPI schema\",\n      \"kind\": \"sentius.kinds.agents.openapiagent\",\n      \"semantic_action\": {\n        \"semantic_action_type\": \"openapi.upload\",\n        \"openapi_path\": \"/v1/reports/upload\",\n        \"output_schema\": \"#/definitions/ReportDocument\",\n        \"openapi_id\": \"upload_api\",\n        \"pods\": [\n          {\n            \"target_user_email\": &lt;TARGET_USER_EMAIL&gt;\n          }\n        ]\n      },\n      \"dependsOn\": [\n        \"download_file_from_google_drive\"\n      ],\n      \"input_mapping\": [\n        {\n          \"source\": \"$context$.downloadedFileName\",\n          \"target\": \"$input_schema$.fileName\",\n          \"type\": \"Sentius.Properties.Mappings.Http.Payload\"\n        },\n        {\n          \"source\": \"$context$.accountId\",\n          \"target\": \"$input_schema$.accountId\",\n          \"type\": \"Sentius.Properties.Mappings.Http.Payload\"\n        },\n        {\n          \"source\": \"$context$.testId\",\n          \"target\": \"$input_schema$.testId\",\n          \"type\": \"Sentius.Properties.Mappings.Http.Payload\"\n        },\n        {\n          \"source\": \"$context$.isReady\",\n          \"target\": \"$input_schema$.isReady\",\n          \"type\": \"Sentius.Properties.Mappings.Http.Payload\"\n        },\n        {\n          \"source\": \"$context$.downloadedFileName\",\n          \"target\": \"$input_schema$.fileName\"\n        },\n        {\n          \"source\": \"$context$.downloadedFilePath\",\n          \"target\": \"$input_schema$.filePath\"\n        },\n        {\n          \"source\": \"$context$.fileKey\",\n          \"target\": \"$input_schema$.fileKey\"\n        },\n        {\n          \"source\": \"$context$.Authorization\",\n          \"target\": \"$input_schema$.Authorization\",\n          \"type\": \"Sentius.Properties.Mappings.Http.Header\"\n        }\n      ],\n      \"output_mapping\": [\n        {\n          \"source\": \"$output_schema$\",\n          \"target\": \"$context$.reportDocument\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"api/workflow-engine-api/#payload","title":"Payload","text":"<p>Use following data to run workflow.</p> <p>Don't forget to change filename value. Make sure you have this file on Google Drive  (if the extension of the file is invisible on Google Drive, write the filename without the extension). Do not change <code>accountId</code>, <code>testId</code>, <code>isReady</code>.  Change <code>Authorization</code> to the authorization token if you change the local server for data uploading to a custom one,  and it requires authorization.</p> <pre><code>{\n    \"filename\": \"&lt;FILE NAME FROM GOOGLE DRIVE&gt;\",\n    \"fileKey\": \"file\",\n    \"accountId\": \"account_id\",\n    \"testId\": \"test_id\",\n    \"Authorization\": \"Bearer &lt;token&gt;\",\n    \"isReady\": false\n}\n</code></pre>"},{"location":"api/workflow-engine-api/#cleaning-queues","title":"Cleaning queues","text":"<p>When WE send requests to Browser Agent that don't connected to browser, it gets error, but messages are keeped in queue. To clean the messages use following request:</p> <pre><code>curl -X 'POST' \\\n  'https://api.sentius.ai/user/purge_queue?api_key=&lt;YOUR_API_KEY&gt;' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"target_user_email\": \"&lt;TARGET_USER_EMAIL&gt;\"\n}'\n</code></pre> <p><code>target_user_emain</code> in payload is optional. If it's not set, queue of API_KEY owner will be cleaned.</p>"},{"location":"platform-components/agents/","title":"Agents","text":""},{"location":"platform-components/agents/#overview-of-an-agent","title":"Overview of an Agent","text":"<p>AI agent, by definition, is a software component that is connected to one or more tools, and capable of figuring out how to solve a particular task on its own with minimal to no human intervention - autonomously. </p>"},{"location":"platform-components/agents/#browser-agent","title":"Browser Agent","text":"<p>Browser Agent is our first and most advanced autonomous AI agent. It is designed to intelligently navigate websites to autonomously complete tasks like interacting with them or extracting data from them.</p> <p>For example, you can ask Sentius browser agent to find a quarterly financial results presentation of a public company:</p> <p>Learn how to automate web browser tasks using Browser Agent in the Browser Agent API.</p>"},{"location":"platform-components/agents/#openapi-agent","title":"OpenAPI Agent","text":"<p>OpenAPI agent is our second agent. It is designed to interact with a given web service's REST APIs as long as those APIs are described based on OpenAPI standard.</p> <p>For example, you can configure Sentius OpenAPI agent to ask a e-commerces shipping service like FreightOS to calculate shipping estimates for moving goods from China to US.</p> <p>Learn how to incorporate calls to OpenAPI-based REST API web services in the Workflow Engine documentation. </p>"},{"location":"platform-components/agents/#prompt-agent","title":"Prompt Agent","text":"<p>Our third AI agent is Prompt Agent. It interacts with an LLM to perform tasks that do not require use of any tools, like providing a structured response to a question based on data obtained by other AI agents, or generating summaries etc.</p> <p>For example, you can ask Sentius prompt agent to look at the data collected by the browser agent and transform it into a form that is native for a given OpenAPI to be called by OpenAPI agent.</p> <p>Learn how to incorporate calls to Prompt Agent in the Workflow Engine documentation.</p>"},{"location":"platform-components/agents/#future-releases","title":"Future Releases","text":"<p>There are more AI agents currently in development, like document agent capable of finding answers to a given question within a provided document or set of documents, desktop agent designed to control desktop applications across Windows and macOS, with even more coming in the future.</p>"},{"location":"platform-components/agents/browser-agent/","title":"Browser Agent","text":"<p>Coming soon</p>"},{"location":"platform-components/agents/openapi-agent/","title":"OpenAPI Agent","text":"<p>Coming soon</p>"},{"location":"platform-components/agents/prompt-agent/","title":"Prompt Agent","text":"<p>Coming soon</p>"},{"location":"platform-components/applications/sentius-copilot-plus/","title":"Sentius Copilot+","text":"<p>Sentius Copilot+ is an Electron-based desktop application that controls web browsers (and, later, desktop apps) across Windows, macOS, and Ubuntu. Practically speaking, Sentius Copilot+ hosts a part of the browser agent that connects to a web browser on your computer, Google Chrome by default.</p> <p>Sentius Copilot+ application can run in two modes:</p> <ul> <li>manual mode</li> <li>unattended mode</li> </ul>"},{"location":"platform-components/applications/sentius-copilot-plus/#logging-in","title":"Logging in","text":"<p>To log into Sentius Copilot+ application, you need to have a Google or Microsoft Account. It can be either a personal or a work-issued one.</p>"},{"location":"platform-components/applications/sentius-copilot-plus/#running","title":"Running","text":""},{"location":"platform-components/applications/sentius-copilot-plus/#manual-mode","title":"Manual Mode","text":"<p>You can interact with Sentius Copilot+ application manually by:</p> <ul> <li>asking it to perform new tasks for you</li> <li>showing it how to do tasks for you by recording and saving instructions for them in it</li> <li>asking it to perform tasks based on the saved instructions</li> </ul>"},{"location":"platform-components/applications/sentius-copilot-plus/#unattended-mode","title":"Unattended Mode","text":"<p>You can integrate your Sentius Copilot+ application to execute browser automation tasks into your existing application by obtaining your API key and using it to call Browser Agent API.</p>"},{"location":"platform-components/applications/sentius-copilot-plus/#examples","title":"Examples","text":""},{"location":"platform-components/applications/sentius-copilot-plus/#quarterly-presentations-lookup-demo","title":"Quarterly Presentations Lookup Demo","text":"<p>In this demo, you can see how you can use zero-shot capability of the browser agent running inside the Sentius Copilot+ application to find quarterly financial results presentations for investors on the websites of three different publicly traded companies using the same prompt:</p>"},{"location":"platform-components/applications/sentius-copilot-plus/#recorder-demo","title":"Recorder Demo","text":"<p>In this demo, you can see how you can use recorder capability of the browser agent running inside the Sentius Copilot+ application to teach it how to find vaccines needed to visit a given country on the CDC website, and then execute that saved instruction inside it:</p>"},{"location":"platform-components/applications/sentius-copilot-plus/#user-roles","title":"User Roles","text":"<p>Currently, Sentius Teach &amp; Repeat Platform supports three user roles:</p> <ul> <li>end-user</li> <li>developer</li> <li>tenant administrator (coming soon)</li> </ul> <p>To integrate browser agent (that uses your Sentius Copilot+ application instance), you need to have a developer role.</p>"},{"location":"platform-components/applications/sentius-copilot-plus/#automatic-updates","title":"Automatic Updates","text":"<p>Sentius Copilot+ application is automatically updated on each start.</p>"},{"location":"platform-components/applications/sentius-copilot-plus/#availability","title":"Availability","text":"<ul> <li>Windows 10+ - x86_64 (Intel, AMD), arm64 (Qualcomm)</li> <li>macOS - x86_64 (Intel), arm64 (M1+)</li> <li>Ubuntu - x86_64 (Intel, AMD)</li> </ul>"},{"location":"platform-components/applications/sentius-studio/","title":"Sentius Studio","text":"<p>Sentius Studio is a native desktop application that allows creation, editing, testing, deployment, and monitoring (coming later in 2025) of complex workflows. Currently supports Windows 10+, with macOS support coming later in 2025.</p>"},{"location":"platform-components/applications/sentius-studio/#logging-in","title":"Logging In","text":"<p>To connect Sentius Studio to Sentius Teach &amp; Repeat Platform, you currently need to:  * have a developer role,  * download Sentius Copilot+,  * obtain API key in its settings, * and then set it to the Browser Agent API key field in the Connected Services window that you can open by going to Settings --&gt; Options --&gt; Configure (Connected Services).</p>"},{"location":"platform-components/applications/sentius-studio/#key-concepts","title":"Key Concepts","text":"<p>To start working with Sentius Studio, you should learn its key concepts:</p>"},{"location":"platform-components/applications/sentius-studio/#high-level-concepts","title":"High-Level Concepts","text":"<ul> <li>Projects - all work in Sentius Studio is organized by projects; for example, you may have a \"Test Project\" for experiments, \"Production\" for your production workflows, and more.</li> <li>Entities - all information Sentius Studio is organized into universal entities called Entities. You can create any kind of entity inside Sentius Studio. </li> <li>Kinds - each entity has a type called kind. This type is a friendly way to describe the meaning of a particular entity. There is a hierarchy of Kinds built into Sentius Studio. For example, Project is an Entity of Kind Project.  </li> <li>Properties - each instance of an entity has properties; each entity has Title and Description. Depending on the type of the given entity, properties can vary. For example, a custom entity of kind Rocket can have a custom property called number of engines.</li> <li>Relationships - each instance of an entity can be connected to an instance of another entity using relationship. Like with properties, depending on the types of two given entities, available relationships between can vary. For example, a Process entity can have connection to browser agent instruction entity called has substep.</li> <li>Actions - each instance of an entity can be interacted with using actions. Like with properties and relationships, depending on the type of a given entity, available actions can vary. For example, you can execute a browser agent instruction, or open a website entity in your web browser.</li> </ul>"},{"location":"platform-components/applications/sentius-studio/#projects-views","title":"Projects &amp; Views","text":"<p>Entities in Sentius Studio can be organized together using Projects and Views.</p> <p>While Projects can be seen as an equivalent to the zoomable space provided by popular whiteboarding applications like Microsoft Whiteboard or Miro, Views are more specific entities that can be used to organize information in more specific ways:</p> <ul> <li>Process is a workflow representation of Agent Instructions; you can use it to create, edit, test, deploy, and monitor (coming later in 2025) multi-agent workflows</li> <li>List is, well, a list of entities; you can use Lists to create lists of your objects</li> <li>Graph is a graph representation of a number of entities interconnected with each other; you can use Graphs to explore connections between entities and save those explorations for later view</li> </ul>"},{"location":"platform-components/applications/sentius-studio/#agents-saved-instructions-and-workflows","title":"Agents, Saved Instructions, and Workflows","text":"<ul> <li>Agents - each supported Agent from Sentius Agents is represented by its own Kind in Sentius Studio:</li> <li>Browser Agent</li> <li>OpenAPI Agent</li> <li>Prompt Agent</li> <li>Workflows - when you want to combine one or more agents into a multi-step agentic workflow, you can do that by generating a workflow using Sentius Process Designer's Copilot (coming later in 2025), by editing it, or by creating one manually from scratch.</li> <li>Saved Instructions - while the work inside the worklfow is performed by agents, you need to provide instructions to the Workflow Engine that explain it how that work should be done by the each given agent.</li> </ul>"},{"location":"platform-components/applications/sentius-studio/#examples","title":"Examples","text":""},{"location":"platform-components/applications/sentius-studio/#concerts-venue-directions-demo-video","title":"Concerts + Venue + Directions Demo Video","text":"<p>A simple example consisting of three browser agent steps is shown below:</p>"},{"location":"platform-components/applications/sentius-studio/#end-to-end-shipping-demo-video","title":"End-to-End Shipping Demo Video","text":"<p>A complex example involving different steps ran by different agents: browser agent, OpenAPI agent, and prompt agent, is shown below:</p>"},{"location":"platform-components/applications/sentius-studio/#automatic-updates","title":"Automatic Updates","text":"<p>Sentius Studio application is automatically updated on each start.</p>"},{"location":"platform-components/applications/sentius-studio/#availability","title":"Availability","text":"<ul> <li>Windows 10+ (1904+) - x86_64, arm64 (via emulation)</li> </ul>"},{"location":"platform-components/applications/sentius-studio/#future-releases","title":"Future Releases","text":"<ul> <li>macOS (coming later)</li> </ul>"},{"location":"platform-components/services/workflow-engine/","title":"Workflow Engine","text":"<p>Coming soon</p>"}]}